import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

// üß± –°—Ç—Ä–∞–Ω–∏—Ü—ã
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import ProfilePage from './pages/ProfilePage';
import DirectorProfilePage from './pages/DirectorProfilePage';
import CreatePlanPage from './pages/CreatePlanPage';
import RegisterEmployeePage from './pages/RegisterEmployeePage';
import OrdersPage from './pages/OrdersPage';
import OrderApprovalPage from './pages/OrderApprovalPage';
import OrderCompletionPage from './pages/OrderCompletionPage';

export default function App() {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [authChecked, setAuthChecked] = useState(false);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        console.log('App: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...');

        const savedUser = localStorage.getItem('user');
        const isAuthenticated = localStorage.getItem('isAuthenticated');
        const token = localStorage.getItem('token');

        console.log('App: localStorage user:', savedUser);
        console.log('App: localStorage isAuthenticated:', isAuthenticated);
        console.log('App: localStorage token:', token ? 'exists' : 'none');

        if (isAuthenticated === 'true' && savedUser && token) {
            try {
                const userData = JSON.parse(savedUser);
                console.log('App: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
                setUser(userData);
            } catch (e) {
                console.error('App: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user data:', e);
                handleLogout();
            }
        } else {
            console.log('App: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏');
            setUser(null);
        }

        setAuthChecked(true);
        setLoading(false);
    }, []);

    const handleLogin = (userData) => {
        console.log('App: handleLogin –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', userData);

        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUser(userData);

        // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        localStorage.setItem('user', JSON.stringify(userData));
        localStorage.setItem('isAuthenticated', 'true');

        console.log('App: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ–≤—ã–π user:', userData);
    };

    const handleLogout = () => {
        console.log('App: Logging out user');

        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('user');
        localStorage.removeItem('isAuthenticated');
        localStorage.removeItem('token');
        localStorage.removeItem('refresh_token');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUser(null);

        console.log('App: Logout completed');
    };

    const isAuthenticated = !!user && localStorage.getItem('isAuthenticated') === 'true';

    // –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (loading) {
        return (
            <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100vh',
                fontSize: '18px'
            }}>
                –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
            </div>
        );
    }

    console.log('App: –†–µ–Ω–¥–µ—Ä - isAuthenticated:', isAuthenticated, 'user:', user);

    return (
        <Router>
            <Routes>
                {/* –ì–ª–∞–≤–Ω–∞—è */}
                <Route path="/" element={<HomePage />} />

                {/* –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è */}
                <Route
                    path="/login"
                    element={
                        isAuthenticated ? (
                            <Navigate to={user.role === 'DIRECTOR' ? '/director' : '/profile'} replace />
                        ) : (
                            <LoginPage onLogin={handleLogin} />
                        )
                    }
                />

                {/* –ü—Ä–æ—Ñ–∏–ª—å –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <Route
                    path="/profile"
                    element={
                        isAuthenticated ? (
                            user.role === 'DIRECTOR' ? (
                                <Navigate to="/director" replace />
                            ) : (
                                <ProfilePage user={user} onLogout={handleLogout} />
                            )
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –ü—Ä–æ—Ñ–∏–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ */}
                <Route
                    path="/director"
                    element={
                        isAuthenticated ? (
                            user.role === 'DIRECTOR' ? (
                                <DirectorProfilePage user={user} onLogout={handleLogout} />
                            ) : (
                                <Navigate to="/profile" replace />
                            )
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ */}
                <Route
                    path="/create-plan"
                    element={
                        isAuthenticated ? (
                            <CreatePlanPage user={user} onLogout={handleLogout} />
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ */}
                <Route
                    path="/register-employee"
                    element={
                        isAuthenticated ? (
                            <RegisterEmployeePage user={user} onLogout={handleLogout} />
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –ó–∞–∫–∞–∑—ã */}
                <Route
                    path="/orders"
                    element={
                        isAuthenticated ? (
                            <OrdersPage user={user} onLogout={handleLogout} />
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º */}
                <Route
                    path="/order-approval/:orderId"
                    element={
                        isAuthenticated && user.role === 'DIRECTOR' ? (
                            <OrderApprovalPage user={user} onLogout={handleLogout} />
                        ) : isAuthenticated ? (
                            <Navigate to="/profile" replace />
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}
                <Route
                    path="/order-completion/:orderId"
                    element={
                        isAuthenticated ? (
                            <OrderCompletionPage user={user} onLogout={handleLogout} />
                        ) : (
                            <Navigate to="/login" replace />
                        )
                    }
                />

                {/* –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
                <Route path="*" element={<Navigate to="/" replace />} />
            </Routes>
        </Router>
    );
}