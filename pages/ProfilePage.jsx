import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import { getOrdersUserById, getUserByToken, getEmployeeByUserId } from '../api/api';
import styles from '../styles/ProfilePage.module.css';

export default function ProfilePage({ user }) {
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    const [userInfo, setUserInfo] = useState(user || {});
    const [employeeInfo, setEmployeeInfo] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    const clearStorageAndRedirect = () => {
        console.log('–û—á–∏—Å—Ç–∫–∞ localStorage –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω...');

        // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('user');
        localStorage.removeItem('userEmail');
        localStorage.removeItem('isAuthenticated');
        localStorage.removeItem('email');
        navigate('/login');
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const clearAuthData = () => {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('user');
        localStorage.removeItem('userEmail');
        localStorage.removeItem('isAuthenticated');
        localStorage.removeItem('email');
    };

    const arrayToDateString = (dateArray) => {
        if (!dateArray || !Array.isArray(dateArray) || dateArray.length < 3) {
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        }

        const [year, month, day] = dateArray;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —á–∏—Å–ª–∞
        if (isNaN(year) || isNaN(month) || isNaN(day)) {
            return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        }

        const formattedMonth = String(month).padStart(2, '0');
        const formattedDay = String(day).padStart(2, '0');

        return `${year}-${formattedMonth}-${formattedDay}`;
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    const getFullName = () => {
        if (userInfo?.firstname && userInfo?.lastname) {
            return `${userInfo.firstname} ${userInfo.lastname}`;
        }
        return userInfo?.name || '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusText = (status) => {
        const statusMap = {
            'PENDING': '–û–∂–∏–¥–∞–Ω–∏–µ',
            'APPROVED': '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'COMPLETED': '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'FAILED': '–ü—Ä–æ–≤–∞–ª–µ–Ω',
            'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ'
        };
        return statusMap[status] || status;
    };

    // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusClass = (status) => {
        const statusClassMap = {
            'PENDING': styles.statusPending,
            'APPROVED': styles.statusApproved,
            'COMPLETED': styles.statusCompleted,
            'FAILED': styles.statusFailed,
            'IN_PROGRESS': styles.statusInProgress
        };
        return statusClassMap[status] || styles.statusDefault;
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                setError('');

                const token = localStorage.getItem('access_token');
                if (!token) {
                    console.log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
                    setError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                    setTimeout(clearStorageAndRedirect, 2000);
                    return;
                }

                console.log('–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                const [userData] = await Promise.all([
                    getUserByToken(token)
                ]);
                const user = userData.data;
                console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                const employeeResponse = await getEmployeeByUserId(Number(user.id));
                console.log("Employee response", employeeResponse);
                const employee = employeeResponse.data;

                const formattedEmployeeInfo = {
                    ...employee,
                    birthDate: (employee?.birthDate),
                    hireDate: (employee?.hireDate)
                };

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const ordersResponse = await getOrdersUserById(user.id);
                console.log("Orders response", ordersResponse);

                if (ordersResponse.success) {
                    setOrders(ordersResponse.data);
                } else {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', ordersResponse.error);
                }

                setUserInfo(user);
                setEmployeeInfo(formattedEmployeeInfo);

            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

                if (err.response?.status === 401 || err.response?.status === 403) {
                    setTimeout(clearStorageAndRedirect, 2000);
                }
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [user]);

    if (loading) return (
        <div className={styles.page}>
            <Header isAuthenticated={true} />
            <main className={styles.main}>
                <div className={styles.container}>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
            </main>
            <Footer />
        </div>
    );

    if (error) return (
        <div className={styles.page}>
            <Header isAuthenticated={true} />
            <main className={styles.main}>
                <div className={styles.container}>
                    <p className={styles.error}>{error}</p>
                    <button
                        className={styles.button}
                        onClick={() => window.location.reload()}
                    >
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <button
                        className={styles.button}
                        onClick={clearStorageAndRedirect}
                        style={{ marginLeft: '10px' }}
                    >
                        –í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </main>
            <Footer />
        </div>
    );

    return (
        <div className={styles.page}>
            <Header isAuthenticated={true} />

            <main className={styles.main}>
                <div className={styles.container}>
                    {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                    <div className={styles.userCard}>
                        <img
                            src={userInfo?.photo || 'https://via.placeholder.com/150'}
                            alt="–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
                            className={styles.userPhoto}
                        />
                        <h2 className={styles.userName}>{getFullName()}</h2>
                        <p><strong>E-mail:</strong> {userInfo?.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {userInfo?.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                        <p><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> {employeeInfo?.position?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                        <p><strong>–î–∞—Ç–∞ –Ω–∞–π–º–∞:</strong> {employeeInfo?.hireDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
                        <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {employeeInfo?.birthDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>

                    </div>

                    {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
                    <div className={styles.ordersSection}>
                        <h2 className={styles.ordersTitle}>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>

                        {orders.length > 0 ? (
                            <div className={styles.ordersList}>
                                {orders.map((order) => (
                                    <div
                                        key={order.id}
                                        className={styles.orderCard}
                                        onClick={() => navigate(`/order-completion/${order.id}`)}
                                    >
                                        <div className={styles.orderHeader}>
                                            <h3 className={styles.orderTitle}>
                                                {order.name || `–ó–∞–∫–∞–∑ #${order.id}`}
                                            </h3>
                                            <span className={`${styles.orderStatus} ${getStatusClass(order.status)}`}>
                                                {getStatusText(order.status)}
                                            </span>
                                        </div>

                                        <div className={styles.orderDetails}>
                                            <p><strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {order.customer || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                                            {order.quest && (
                                                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {order.quest}</p>
                                            )}
                                            {order.deadline && (
                                                <p><strong>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {new Date(order.deadline).toLocaleDateString()}</p>
                                            )}
                                            {order.managerName && (
                                                <p><strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> {order.managerName}</p>
                                            )}
                                        </div>

                                        <div className={styles.orderId}>
                                            ID: {order.id}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className={styles.noOrders}>
                                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>
                                <p className={styles.noOrdersSubtitle}>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</p>
                            </div>
                        )}

                        {orders.length > 0 && (
                            <div className={styles.actions}>
                                <button
                                    className={`${styles.button} ${styles.yellow}`}
                                    onClick={() => navigate('/orders-user')}
                                >
                                    –í—Å–µ –º–æ–∏ –∑–∞–∫–∞–∑—ã
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </main>

            <Footer />
        </div>
    );
}