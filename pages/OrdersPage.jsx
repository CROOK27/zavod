import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import styles from '../styles/OrdersPage.module.css';
import { getAllOrders } from '../api/api';

export default function OrdersPage({ user, onLogout }) {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    const isDirector = user?.role === 'ADMIN';
    const canChangeStatus = user?.role === 'HR' || user?.role === 'USER' || isDirector;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    useEffect(() => {
        const fetchOrders = async () => {
            try {
                const response = await getAllOrders();
                if (response.success) {
                    setOrders(response.data);
                } else {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', response.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchOrders();
    }, []);

    // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É
    const handleViewOrder = (orderId) => {
         if (isDirector) {
                    navigate(`/order-approval/${orderId}`);
         } else{
             navigate(`/order-completion/${orderId}`)
         };

    };

    const getManagerName = (manager) => {
        if (!manager) return '–ù–µ —É–∫–∞–∑–∞–Ω';
        if (manager.user) {
            return `${manager.user.firstname} ${manager.user.lastname}`;
        }
        return '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω';
    };

    const getStatusText = (status) => {
        const statusMap = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'APPROVED': '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'COMPLETED': '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'FAILED': '–ü—Ä–æ–≤–∞–ª–µ–Ω',
            'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ',
            'REJECTED': '–û—Ç–∫–ª–æ–Ω–µ–Ω'
        };
        return statusMap[status] || status;
    };

    const getStatusClass = (status) => {
        const statusClassMap = {
            'pending': styles.statusPending,
            'APPROVED': styles.statusApproved,
            'COMPLETED': styles.statusCompleted,
            'FAILED': styles.statusFailed,
            'IN_PROGRESS': styles.statusInProgress,
            'REJECTED': styles.statusRejected
        };
        return statusClassMap[status] || styles.statusDefault;
    };

    // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
    const getButtonText = (order) => {
        if (isDirector && order.status === 'pending') {
            return '–£—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑';
        }
        if (canChangeStatus && order.status !== 'pending' && order.status !== 'REJECTED') {
            return '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
        }
        return '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑';
    };

    // –ö–ª–∞—Å—Å –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
    const getButtonClass = (order) => {
        if (isDirector && order.status === 'pending') {
            return styles.approveButton;
        }
        if (canChangeStatus && order.status !== 'pending' && order.status !== 'REJECTED') {
            return styles.statusButton;
        }
        return styles.viewButton;
    };

    return (
        <div className={styles.page}>
            <Header
                isAuthenticated={true}
                onLogout={onLogout}
                user={user}
            />

            <main className={styles.main}>
                <div className={styles.container}>
                    <h1 className={styles.title}>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</h1>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö */}
                    <div className={styles.roleInfo}>
                        {isDirector && (
                            <p className={styles.directorNote}>üéØ –í—ã –º–æ–∂–µ—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞–Ω—ã –∏ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã</p>
                        )}
                        {!isDirector && canChangeStatus && (
                            <p className={styles.managerNote}>‚ö° –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
                        )}
                        {!isDirector && !canChangeStatus && (
                            <p className={styles.userNote}>üëÄ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã</p>
                        )}
                    </div>

                    {loading ? (
                        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</div>
                    ) : orders.length === 0 ? (
                        <div className={styles.emptyState}>
                            <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>
                            <button
                                className={styles.createOrderButton}
                                onClick={() => navigate('/create-plan')}
                            >
                                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
                            </button>
                        </div>
                    ) : (
                        <div className={styles.ordersList}>
                            {orders.map(order => (
                                <div key={order.id} className={styles.orderItem}>
                                    <div className={styles.orderHeader}>
                                        <div className={styles.orderInfo}>
                                            <h2 className={styles.projectName}>
                                                {order.name || `–ó–∞–∫–∞–∑ #${order.id}`}
                                            </h2>
                                            <div className={styles.orderMeta}>
                                                <p className={styles.sender}>
                                                    <strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {order.customer || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                                </p>
                                                <p className={styles.manager}>
                                                    <strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> {getManagerName(order.manager)}
                                                </p>
                                                <div className={styles.status}>
                                                    <strong>–°—Ç–∞—Ç—É—Å:</strong>
                                                    <span className={`${styles.statusBadge} ${getStatusClass(order.status)}`}>
                                                        {getStatusText(order.status)}
                                                    </span>
                                                </div>
                                            </div>
                                            {order.quest && (
                                                <p className={styles.description}>
                                                    <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {order.quest}
                                                </p>
                                            )}
                                        </div>
                                        <div className={styles.orderId}>
                                            ID: {order.id}
                                        </div>
                                    </div>

                                    <div className={styles.orderActions}>
                                        <button
                                            onClick={() => handleViewOrder(order.id)}
                                            className={getButtonClass(order)}
                                        >
                                            {getButtonText(order)}
                                        </button>

                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö */}
                                        {order.status === 'pending' && !isDirector && (
                                            <span className={styles.pendingInfo}>
                                                ‚è≥ –û–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º
                                            </span>
                                        )}

                                        {order.status === 'REJECTED' && (
                                            <span className={styles.rejectedInfo}>
                                                ‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω
                                            </span>
                                        )}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </main>

            <Footer />
        </div>
    );
}